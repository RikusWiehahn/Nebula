type BasicResponse = record {
    "ok": opt text;
    "err": text;
};

type TrustedCanister = record {
    "name": text;
    "canister_id": text;
};

type TrustedCanistersResponse = record {
    "ok": vec TrustedCanister;
    "err": text;
};

type SubCanisterTelemetry = record {
    "id": text;
    "model_name": text;
    "memory_size": float64;
    "memory_used": float64;
    "cycles": float64;
};

type Telemetry = record {
    "last_status_check": float64;
    "main_id": text;
    "main_memory_size": float64;
    "main_memory_used": float64;
    "main_cycles": float64;
    "bucket_wasm_size": float64;
    "sub_canisters": vec SubCanisterTelemetry;
};

type TelemetryResponse = record {
    "ok": opt Telemetry;
    "err": text;
};

type ModelDataFieldType = record {
    "field_name": text;
    "data_type": text;
    "default_json_value": text;
};

/* 
    Data Types:
    "STRING"
    "NUMBER"
    "BOOLEAN"
    "STRING_ARRAY"
    "NUMBER_ARRAY"
*/

type Model = record {
    "model_name": text;
    "data_fields": vec ModelDataFieldType;
};

type ModelResponse = record {
    "ok": opt Model;
    "err": text;
};

type ModelListResponse = record {
    "ok": vec Model;
    "err": text;
};

type ModelInstanceResponse = record {
    "json": opt text;
    "err": text;
};

service : {
    "activate": (record { password: text; password_check: text; bucket_wasm: blob }) -> (BasicResponse);
    "is_activated": () -> (bool);
    "sign_in": (record { password: text }) -> (BasicResponse);
    "check_session": (record { token: text }) -> (BasicResponse);
    "change_password": (record { old_password: text; password: text; password_check: text }) -> (BasicResponse);

    "get_system_telemetry": (record { token: text }) -> (TelemetryResponse);

    "get_trusted_canisters": (record { token: text }) -> (TrustedCanistersResponse);
    "add_trusted_canister": (record { token: text; name: text; canister_id: text }) -> (TrustedCanistersResponse);
    "remove_trusted_canister": (record { token: text; canister_id: text}) -> (TrustedCanistersResponse);

    "create_model": (record { token: text; model_name: text }) -> (BasicResponse);
    "get_models": (record { token: text }) -> (ModelListResponse);
    "get_model": (record { token: text; model_name: text }) -> (ModelResponse);
    "add_model_field": (record { token: text; model_name: text }, ModelDataFieldType) -> (ModelResponse);
    "remove_model_field": (record {token: text; model_name: text; field_name: text }) -> (ModelResponse);
    "delete_model": (record { token: text; model_name: text }) -> (BasicResponse);
    
    "create_model_instance": (record { token: text; json: text; }) -> (ModelInstanceResponse);
    "update_model_instance": (record { token: text; id: text; json: text; }) -> (ModelInstanceResponse);
    "get_model_instance": (record { token: text; id: text }) -> (ModelInstanceResponse);
    "delete_model_instance": (record { token: text; id: text }) -> (BasicResponse);

    "wallet_receive": (nat) -> ();
}
