type BasicResponse = record {
    "ok": opt text;
    "err": text;
};

type DefiniteCanisterSettings = record {
  controllers : vec principal;
  compute_allocation : nat;
  memory_allocation : nat;
  freezing_threshold : nat;
};

type SubCanisterTelemetry = record {
    "last_status_check": float64;
    "id": text;
    "settings": DefiniteCanisterSettings;
    "status": text;
    "module_hash": text;
    "memory_size": float64;
    "cycles": float64;
};

type Telemetry = record {
    "last_status_check": float64;
    "main_id": text;
    "main_memory_size": float64;
    "main_memory_used": float64;
    "main_cycles": float64;
    "sub_canisters": vec SubCanisterTelemetry;
};

type TelemetryResponse = record {
    "ok": opt Telemetry;
    "err": text;
};

service : {
    "isAuthSet": () -> (bool);
    "setAuth": (text, text) -> (BasicResponse);
    "signIn": (text) -> (BasicResponse);
    "changePassword": (text, text,text) -> (BasicResponse);
    "checkSession": (text) -> (BasicResponse);
    "getSystemTelemetry": (text) -> (TelemetryResponse);
}
