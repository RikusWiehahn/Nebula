type BasicResponse = record {
    "ok": opt text;
    "err": text;
};

type SubCanisterTelemetry = record {
    "id": text;
    "model_name": text;
    "memory_size": float64;
    "memory_used": float64;
    "cycles": float64;
};

type SubCanisterTelemetryResponse = record {
    "ok": opt SubCanisterTelemetry;
    "err": text;
};

type ModelDataFieldType = record {
    "field_name": text;
    "data_type": text;
    "default_json_value": text;
};

/* 
    Data Types:
    "STRING"
    "NUMBER"
    "BOOLEAN"
    "STRING_ARRAY"
    "NUMBER_ARRAY"
*/

type ModelDataField = record {
    "field_name": text;
    "data_type": text;
    "json_value": text;
};

type ModelInstance = record {
    "id": text;
    "model_name': text;
    "data_fields": vec ModelDataField;
};

type ModelInstanceResponse = record {
    "ok": opt ModelInstance;
    "err": text;
};

type ModelInstanceListResponse = record {
    "start_index": float64;
    "end_index": float64;
    "total_count": float64;
    "list": vec ModelInstance;
    "err": text;
};

service : {
    // Auth & setup
    "set_admin_canister": (record { canister_id: principal }) -> (BasicResponse);
    "check_if_admin_canister": () -> (BasicResponse);
    "init_model": (record { model_name: text }) -> (BasicResponse);
    "get_telemetry": () -> (SubCanisterTelemetryResponse);

    // Manage model fields
    "add_field": (ModelDataFieldType) -> (BasicResponse);
    "remove_field": (record { field_name: text }) -> (BasicResponse);

    // Create/Read/Update/Delete model instances
    "create_instance": (ModelInstance) -> (ModelInstanceResponse);
    "update_instance": (ModelInstance) -> (ModelInstanceResponse);
    "get_instance": (record { id: text }) -> (ModelInstanceResponse);
    "delete_instance": (record { id: text }) -> (BasicResponse);
    "get_instance_list": (record { start_index, end_index }) -> (ModelInstanceListResponse);

    // wallet
    "wallet_receive": (nat) -> ();
}
